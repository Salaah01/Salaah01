version: "3.2"

services:
  django_db:
    image: postgres:13.3
    restart: always
    volumes:
      - django_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_DB_FILE=/run/secrets/django_db_name
      - POSTGRES_USER_FILE=/run/secrets/django_db_user
      - POSTGRES_PASSWORD_FILE=/run/secrets/django_db_password
    secrets:
      - django_db_name
      - django_db_user
      - django_db_password
    networks:
      - visual_csv

  client_db:
    build: ./client_db/.
    restart: always
    volumes:
      - client_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_DB_FILE=/run/secrets/client_db_name
      - POSTGRES_USER_FILE=/run/secrets/client_db_user
      - POSTGRES_PASSWORD_FILE=/run/secrets/client_db_password
    secrets:
      - client_db_name
      - client_db_user
      - client_db_password
    networks:
      - visual_csv

  client_test_db:
    build: ./client_db/.
    restart: always
    volumes:
      - client_test_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_DB_FILE=/run/secrets/client_test_db_name
      - POSTGRES_USER_FILE=/run/secrets/client_test_db_user
      - POSTGRES_PASSWORD_FILE=/run/secrets/client_test_db_password
    secrets:
      - client_test_db_name
      - client_test_db_user
      - client_test_db_password
    networks:
      - visual_csv

  web:
    build: ./web/.
    restart: always
    env_file: ./web/.web.env
    depends_on:
      - django_db
      - client_db
      - client_test_db
    command: >
      bash -c "cd visualCSV
      && rm -rf static/
      && python manage.py migrate
      && python manage.py collectstatic --noinput
      && gunicorn visualCSV.wsgi:application --bind 0.0.0.0:8000"
    volumes:
      - static_files:/static_files
    networks:
      - visual_csv

  nginx:
    build: ./nginx_dev/.
    restart: always
    depends_on:
      - web
    volumes:
      - static_files:/static_files
    networks:
      - visual_csv
    command: '/bin/sh -c ''while :; do sleep 6h & wait $${!}; nginx -s
      reload; done & nginx -g "daemon off;"'''

volumes:
  static_files:
  django_data:
  client_data:
  client_test_data:

secrets:
  django_db_name:
    file: django_db/env/.postgres_db_name.env
  django_db_user:
    file: django_db/env/.postgres_db_user.env
  django_db_password:
    file: django_db/env/.postgres_db_password.env
  client_db_name:
    file: client_db/env/client_db/.postgres_db_name.env
  client_db_user:
    file: client_db/env/client_db/.postgres_db_user.env
  client_db_password:
    file: client_db/env/client_db/.postgres_db_password.env
  client_test_db_name:
    file: client_db/env/client_db/.postgres_db_name.env
  client_test_db_user:
    file: client_db/env/client_test_db/.postgres_db_user.env
  client_test_db_password:
    file: client_db/env/client_test_db/.postgres_db_password.env

networks:
  visual_csv:
